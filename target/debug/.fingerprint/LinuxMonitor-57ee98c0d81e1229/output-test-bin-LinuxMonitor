{"message":"unused imports: `Rc`, `RwLock`, `process::Command`, `self`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"src/main.rs","byte_start":51,"byte_end":57,"line_start":4,"line_end":4,"column_start":24,"column_end":30,"is_primary":true,"text":[{"text":"    sync::{Arc, Mutex, RwLock},","highlight_start":24,"highlight_end":30}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/main.rs","byte_start":112,"byte_end":116,"line_start":6,"line_end":6,"column_start":26,"column_end":30,"is_primary":true,"text":[{"text":"    time::Duration, rc::{self, Rc}, process::Command,","highlight_start":26,"highlight_end":30}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/main.rs","byte_start":118,"byte_end":120,"line_start":6,"line_end":6,"column_start":32,"column_end":34,"is_primary":true,"text":[{"text":"    time::Duration, rc::{self, Rc}, process::Command,","highlight_start":32,"highlight_end":34}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/main.rs","byte_start":123,"byte_end":139,"line_start":6,"line_end":6,"column_start":37,"column_end":53,"is_primary":true,"text":[{"text":"    time::Duration, rc::{self, Rc}, process::Command,","highlight_start":37,"highlight_end":53}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`#[warn(unused_imports)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"remove the unused imports","code":null,"level":"help","spans":[{"file_name":"src/main.rs","byte_start":49,"byte_end":57,"line_start":4,"line_end":4,"column_start":22,"column_end":30,"is_primary":true,"text":[{"text":"    sync::{Arc, Mutex, RwLock},","highlight_start":22,"highlight_end":30}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"src/main.rs","byte_start":105,"byte_end":139,"line_start":6,"line_end":6,"column_start":19,"column_end":53,"is_primary":true,"text":[{"text":"    time::Duration, rc::{self, Rc}, process::Command,","highlight_start":19,"highlight_end":53}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused imports: `Rc`, `RwLock`, `process::Command`, `self`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:4:24\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m4\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    sync::{Arc, Mutex, RwLock},\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                       \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m5\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    thread::{self, sleep},\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m6\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    time::Duration, rc::{self, Rc}, process::Command,\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                         \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(unused_imports)]` on by default\u001b[0m\n\n"}
{"message":"unused import: `r2d2_postgres::PostgresConnectionManager`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"src/main.rs","byte_start":165,"byte_end":205,"line_start":9,"line_end":9,"column_start":5,"column_end":45,"is_primary":true,"text":[{"text":"use r2d2_postgres::PostgresConnectionManager;","highlight_start":5,"highlight_end":45}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"remove the whole `use` item","code":null,"level":"help","spans":[{"file_name":"src/main.rs","byte_start":161,"byte_end":206,"line_start":9,"line_end":9,"column_start":1,"column_end":46,"is_primary":true,"text":[{"text":"use r2d2_postgres::PostgresConnectionManager;","highlight_start":1,"highlight_end":46}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused import: `r2d2_postgres::PostgresConnectionManager`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:9:5\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m9\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse r2d2_postgres::PostgresConnectionManager;\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\n"}
{"message":"unused imports: `BytesCodec`, `Decoder`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"src/main.rs","byte_start":392,"byte_end":399,"line_start":13,"line_end":13,"column_start":25,"column_end":32,"is_primary":true,"text":[{"text":"use tokio_util::codec::{Decoder, BytesCodec};","highlight_start":25,"highlight_end":32}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/main.rs","byte_start":401,"byte_end":411,"line_start":13,"line_end":13,"column_start":34,"column_end":44,"is_primary":true,"text":[{"text":"use tokio_util::codec::{Decoder, BytesCodec};","highlight_start":34,"highlight_end":44}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"remove the whole `use` item","code":null,"level":"help","spans":[{"file_name":"src/main.rs","byte_start":368,"byte_end":413,"line_start":13,"line_end":13,"column_start":1,"column_end":46,"is_primary":true,"text":[{"text":"use tokio_util::codec::{Decoder, BytesCodec};","highlight_start":1,"highlight_end":46}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused imports: `BytesCodec`, `Decoder`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:13:25\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m13\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse tokio_util::codec::{Decoder, BytesCodec};\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                        \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^\u001b[0m\n\n"}
{"message":"unreachable expression","code":{"code":"unreachable_code","explanation":null},"level":"warning","spans":[{"file_name":"src/main.rs","byte_start":6173,"byte_end":6179,"line_start":178,"line_end":178,"column_start":5,"column_end":11,"is_primary":true,"text":[{"text":"    Ok(())","highlight_start":5,"highlight_end":11}],"label":"unreachable expression","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/main.rs","byte_start":2044,"byte_end":6168,"line_start":69,"line_end":177,"column_start":5,"column_end":6,"is_primary":false,"text":[{"text":"    loop {","highlight_start":5,"highlight_end":11},{"text":"        //十秒一次","highlight_start":1,"highlight_end":15},{"text":"        if i == 10000 {","highlight_start":1,"highlight_end":24},{"text":"            client.query(\"truncate cache;\", &[]).await?;","highlight_start":1,"highlight_end":57},{"text":"            client.query(\"truncate cpu_freq;\", &[]).await?;","highlight_start":1,"highlight_end":60},{"text":"            client.query(\"truncate cpu_time;\", &[]).await?;","highlight_start":1,"highlight_end":60},{"text":"            client","highlight_start":1,"highlight_end":19},{"text":"                .query(\"truncate cpu_time_usage_predict;\", &[])","highlight_start":1,"highlight_end":64},{"text":"                .await?;","highlight_start":1,"highlight_end":25},{"text":"            client.query(\"truncate disk;\", &[]).await?;","highlight_start":1,"highlight_end":56},{"text":"            client.query(\"truncate env_temp;\", &[]).await?;","highlight_start":1,"highlight_end":60},{"text":"            client.query(\"truncate fan_speed;\", &[]).await?;","highlight_start":1,"highlight_end":61},{"text":"            client.query(\"truncate internet;\", &[]).await?;","highlight_start":1,"highlight_end":60},{"text":"            client.query(\"truncate ram;\", &[]).await?;","highlight_start":1,"highlight_end":55},{"text":"            client.query(\"truncate models;\", &[]).await?;","highlight_start":1,"highlight_end":58},{"text":"            client.query(\"truncate temperature;\", &[]).await?;","highlight_start":1,"highlight_end":63},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"        let timestamp = Utc::now();","highlight_start":1,"highlight_end":36},{"text":"        dataGenerator.refresh();","highlight_start":1,"highlight_end":33},{"text":"        let next_timestamp = timestamp","highlight_start":1,"highlight_end":39},{"text":"            .checked_add_signed(chrono::Duration::milliseconds(interval.as_millis() as i64))","highlight_start":1,"highlight_end":93},{"text":"            .unwrap();","highlight_start":1,"highlight_end":23},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        let cpu_info = dataGenerator.cpu_usage();","highlight_start":1,"highlight_end":50},{"text":"        let query = format!(","highlight_start":1,"highlight_end":29},{"text":"            \"insert into cpu_time values ('{}', '{}', {});\",","highlight_start":1,"highlight_end":61},{"text":"            timestamp, String::from(format!(\"{}1\", cpu_info.device)), cpu_info.usage","highlight_start":1,"highlight_end":85},{"text":"        );","highlight_start":1,"highlight_end":11},{"text":"        client.query(&query, &[]).await?;","highlight_start":1,"highlight_end":42},{"text":"        let query = format!(","highlight_start":1,"highlight_end":29},{"text":"            \"insert into cpu_time value ('{}', '{}', {});\",","highlight_start":1,"highlight_end":60},{"text":"            timestamp, String::from(format!(\"{}2\", cpu_info.device)), cpu_info.usage + rng.gen_range(-5.0..5.0)","highlight_start":1,"highlight_end":112},{"text":"        );","highlight_start":1,"highlight_end":11},{"text":"        let query = format!(","highlight_start":1,"highlight_end":29},{"text":"            \"insert into cpu_freq values ('{}', '{}', {});\",","highlight_start":1,"highlight_end":61},{"text":"            timestamp, cpu_info.device, cpu_info.freq","highlight_start":1,"highlight_end":54},{"text":"        );","highlight_start":1,"highlight_end":11},{"text":"        client.query(&query, &[]).await?;","highlight_start":1,"highlight_end":42},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        let temperature_info = dataGenerator.temperature_info();","highlight_start":1,"highlight_end":65},{"text":"        for temp in temperature_info.into_iter() {","highlight_start":1,"highlight_end":51},{"text":"            let query = format!(","highlight_start":1,"highlight_end":33},{"text":"                \"insert into temperature values ('{}', '{}' , {});\",","highlight_start":1,"highlight_end":69},{"text":"                timestamp,","highlight_start":1,"highlight_end":27},{"text":"                temp.get_name(),","highlight_start":1,"highlight_end":33},{"text":"                temp.temperature","highlight_start":1,"highlight_end":33},{"text":"            );","highlight_start":1,"highlight_end":15},{"text":"            client.query(&query, &[]).await?;","highlight_start":1,"highlight_end":46},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        let fan_info = dataGenerator.fan_info();","highlight_start":1,"highlight_end":49},{"text":"        for fan in fan_info.into_iter() {","highlight_start":1,"highlight_end":42},{"text":"            let query = format!(","highlight_start":1,"highlight_end":33},{"text":"                \"insert into fan_speed values ('{}', '{}' , {});\",","highlight_start":1,"highlight_end":67},{"text":"                timestamp, fan.device, fan.voltage,","highlight_start":1,"highlight_end":52},{"text":"            );","highlight_start":1,"highlight_end":15},{"text":"            client.query(&query, &[]).await?;","highlight_start":1,"highlight_end":46},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        let net_info = dataGenerator.net_info(interval);","highlight_start":1,"highlight_end":57},{"text":"        let query = format!(","highlight_start":1,"highlight_end":29},{"text":"            \"insert into internet values ('{}', '{}', {}, {});\",","highlight_start":1,"highlight_end":65},{"text":"            timestamp, net_info.device, net_info.speed_recv, net_info.speed_trans,","highlight_start":1,"highlight_end":83},{"text":"        );","highlight_start":1,"highlight_end":11},{"text":"        client.query(&query, &[]).await?;","highlight_start":1,"highlight_end":42},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        let disks = dataGenerator.disk_info();","highlight_start":1,"highlight_end":47},{"text":"        for disk in disks {","highlight_start":1,"highlight_end":28},{"text":"            let query = format!(","highlight_start":1,"highlight_end":33},{"text":"                \"insert into disk values ('{}', '{}', {}, {});\",","highlight_start":1,"highlight_end":65},{"text":"                timestamp, disk.disk_name, disk.space_total, disk.space_available,","highlight_start":1,"highlight_end":83},{"text":"            );","highlight_start":1,"highlight_end":15},{"text":"            client.query(&query, &[]).await?;","highlight_start":1,"highlight_end":46},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        let mem = dataGenerator.mem_info();","highlight_start":1,"highlight_end":44},{"text":"        let query = format!(","highlight_start":1,"highlight_end":29},{"text":"            \"insert into ram values ('{}', '{}', {}, {}, {});\",","highlight_start":1,"highlight_end":64},{"text":"            timestamp,","highlight_start":1,"highlight_end":23},{"text":"            String::from(\"dells\"),","highlight_start":1,"highlight_end":35},{"text":"            mem.mem_total,","highlight_start":1,"highlight_end":27},{"text":"            mem.mem_available,","highlight_start":1,"highlight_end":31},{"text":"            (mem.mem_total - mem.mem_available) as f64 * 100.0 / mem.mem_total as f64,","highlight_start":1,"highlight_end":87},{"text":"        );","highlight_start":1,"highlight_end":11},{"text":"        client.query(&query, &[]).await?;","highlight_start":1,"highlight_end":42},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        let cache = dataGenerator.cache_info();","highlight_start":1,"highlight_end":48},{"text":"        let query = format!(","highlight_start":1,"highlight_end":29},{"text":"            \"insert into cache values ('{}', '{}', {}, {});\",","highlight_start":1,"highlight_end":62},{"text":"            timestamp,","highlight_start":1,"highlight_end":23},{"text":"            String::from(\"dells\"),","highlight_start":1,"highlight_end":35},{"text":"            cache.swap_total,","highlight_start":1,"highlight_end":30},{"text":"            cache.free_total,","highlight_start":1,"highlight_end":30},{"text":"        );","highlight_start":1,"highlight_end":11},{"text":"        client.query(&query, &[]).await?;","highlight_start":1,"highlight_end":42},{"text":"","highlight_start":1,"highlight_end":1},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        for i in 0..models.len() {","highlight_start":1,"highlight_end":35},{"text":"            let ratio = rng.gen_range(0.9..=1.1);","highlight_start":1,"highlight_end":50},{"text":"            let query = format!(","highlight_start":1,"highlight_end":33},{"text":"                \"insert into models values ('{}', '{}', {})\",","highlight_start":1,"highlight_end":62},{"text":"                timestamp, models[i], ratio","highlight_start":1,"highlight_end":44},{"text":"            );","highlight_start":1,"highlight_end":15},{"text":"            client.query(&query, &[]).await?;","highlight_start":1,"highlight_end":46},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        let sleep_duration = next_timestamp.signed_duration_since(Utc::now());","highlight_start":1,"highlight_end":79},{"text":"        sleep(sleep_duration.to_std().unwrap());","highlight_start":1,"highlight_end":49},{"text":"    }","highlight_start":1,"highlight_end":6}],"label":"any code following this expression is unreachable","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`#[warn(unreachable_code)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unreachable expression\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:178:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m69\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m    loop {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m70\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        //十秒一次\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m71\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        if i == 10000 {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m72\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            client.query(\"truncate cache;\", &[]).await?;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m176\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        sleep(sleep_duration.to_std().unwrap());\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m177\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|_____-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12many code following this expression is unreachable\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m178\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m    Ok(())\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33munreachable expression\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(unreachable_code)]` on by default\u001b[0m\n\n"}
{"message":"failed to resolve: use of undeclared type `ReaderBuilder`","code":{"code":"E0433","explanation":"An undeclared crate, module, or type was used.\n\nErroneous code example:\n\n```compile_fail,E0433\nlet map = HashMap::new();\n// error: failed to resolve: use of undeclared type `HashMap`\n```\n\nPlease verify you didn't misspell the type/module's name or that you didn't\nforget to import it:\n\n```\nuse std::collections::HashMap; // HashMap has been imported.\nlet map: HashMap<u32, u32> = HashMap::new(); // So it can be used!\n```\n\nIf you've expected to use a crate name:\n\n```compile_fail\nuse ferris_wheel::BigO;\n// error: failed to resolve: use of undeclared crate or module `ferris_wheel`\n```\n\nMake sure the crate has been added as a dependency in `Cargo.toml`.\n\nTo use a module from your current crate, add the `crate::` prefix to the path.\n"},"level":"error","spans":[{"file_name":"src/main.rs","byte_start":12964,"byte_end":12977,"line_start":359,"line_end":359,"column_start":22,"column_end":35,"is_primary":true,"text":[{"text":"    let mut reader = ReaderBuilder::new().from_reader(stream);","highlight_start":22,"highlight_end":35}],"label":"use of undeclared type `ReaderBuilder`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0433]\u001b[0m\u001b[0m\u001b[1m: failed to resolve: use of undeclared type `ReaderBuilder`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:359:22\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m359\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    let mut reader = ReaderBuilder::new().from_reader(stream);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9muse of undeclared type `ReaderBuilder`\u001b[0m\n\n"}
{"message":"failed to resolve: use of undeclared type `WriterBuilder`","code":{"code":"E0433","explanation":"An undeclared crate, module, or type was used.\n\nErroneous code example:\n\n```compile_fail,E0433\nlet map = HashMap::new();\n// error: failed to resolve: use of undeclared type `HashMap`\n```\n\nPlease verify you didn't misspell the type/module's name or that you didn't\nforget to import it:\n\n```\nuse std::collections::HashMap; // HashMap has been imported.\nlet map: HashMap<u32, u32> = HashMap::new(); // So it can be used!\n```\n\nIf you've expected to use a crate name:\n\n```compile_fail\nuse ferris_wheel::BigO;\n// error: failed to resolve: use of undeclared crate or module `ferris_wheel`\n```\n\nMake sure the crate has been added as a dependency in `Cargo.toml`.\n\nTo use a module from your current crate, add the `crate::` prefix to the path.\n"},"level":"error","spans":[{"file_name":"src/main.rs","byte_start":13027,"byte_end":13040,"line_start":360,"line_end":360,"column_start":22,"column_end":35,"is_primary":true,"text":[{"text":"    let mut writer = WriterBuilder::new().from_path(format!(\"{}.csv\", \"cpu_time\"));","highlight_start":22,"highlight_end":35}],"label":"use of undeclared type `WriterBuilder`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0433]\u001b[0m\u001b[0m\u001b[1m: failed to resolve: use of undeclared type `WriterBuilder`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:360:22\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m360\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    let mut writer = WriterBuilder::new().from_path(format!(\"{}.csv\", \"cpu_time\"));\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9muse of undeclared type `WriterBuilder`\u001b[0m\n\n"}
{"message":"the `?` operator can only be used in an async block that returns `Result` or `Option` (or another type that implements `FromResidual`)","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"src/main.rs","byte_start":13207,"byte_end":13208,"line_start":363,"line_end":363,"column_start":61,"column_end":62,"is_primary":true,"text":[{"text":"    while let Some(record) = reader.next().await.transpose()? {","highlight_start":61,"highlight_end":62}],"label":"cannot use the `?` operator in an async block that returns `()`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/main.rs","byte_start":13207,"byte_end":13208,"line_start":363,"line_end":363,"column_start":61,"column_end":62,"is_primary":false,"text":[{"text":"    while let Some(record) = reader.next().await.transpose()? {","highlight_start":61,"highlight_end":62}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"desugaring of operator `?`","def_site_span":{"file_name":"src/main.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1,"is_primary":false,"text":[],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"src/main.rs","byte_start":12302,"byte_end":12316,"line_start":344,"line_end":344,"column_start":1,"column_end":15,"is_primary":false,"text":[{"text":"#[tokio::test]","highlight_start":1,"highlight_end":15}],"label":"this function should return `Result` or `Option` to accept `?`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/main.rs","byte_start":12302,"byte_end":12316,"line_start":344,"line_end":344,"column_start":1,"column_end":15,"is_primary":false,"text":[{"text":"#[tokio::test]","highlight_start":1,"highlight_end":15}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"#[tokio::test]","def_site_span":{"file_name":"/home/guest/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-macros-1.8.2/src/lib.rs","byte_start":10272,"byte_end":10336,"line_start":422,"line_end":422,"column_start":1,"column_end":65,"is_primary":false,"text":[{"text":"pub fn test(args: TokenStream, item: TokenStream) -> TokenStream {","highlight_start":1,"highlight_end":65}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the trait `FromResidual<_>` is not implemented for `()`","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the `?` operator can only be used in an async block that returns `Result` or `Option` (or another type that implements `FromResidual`)\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:363:61\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m344\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[tokio::test]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mthis function should return `Result` or `Option` to accept `?`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m363\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    while let Some(record) = reader.next().await.transpose()? {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mcannot use the `?` operator in an async block that returns `()`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the trait `FromResidual<_>` is not implemented for `()`\u001b[0m\n\n"}
{"message":"aborting due to 3 previous errors; 4 warnings emitted","code":null,"level":"error","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: aborting due to 3 previous errors; 4 warnings emitted\u001b[0m\n\n"}
{"message":"Some errors have detailed explanations: E0277, E0433.","code":null,"level":"failure-note","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1mSome errors have detailed explanations: E0277, E0433.\u001b[0m\n"}
{"message":"For more information about an error, try `rustc --explain E0277`.","code":null,"level":"failure-note","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1mFor more information about an error, try `rustc --explain E0277`.\u001b[0m\n"}
