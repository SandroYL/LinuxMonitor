{"message":"unused imports: `Arc`, `Mutex`, `self`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"src/main.rs","byte_start":41,"byte_end":45,"line_start":4,"line_end":4,"column_start":14,"column_end":18,"is_primary":true,"text":[{"text":"    thread::{self, sleep},","highlight_start":14,"highlight_end":18}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/main.rs","byte_start":82,"byte_end":87,"line_start":5,"line_end":5,"column_start":28,"column_end":33,"is_primary":true,"text":[{"text":"    time::Duration, sync::{Mutex, Arc}","highlight_start":28,"highlight_end":33}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/main.rs","byte_start":89,"byte_end":92,"line_start":5,"line_end":5,"column_start":35,"column_end":38,"is_primary":true,"text":[{"text":"    time::Duration, sync::{Mutex, Arc}","highlight_start":35,"highlight_end":38}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`#[warn(unused_imports)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"remove the unused imports","code":null,"level":"help","spans":[{"file_name":"src/main.rs","byte_start":41,"byte_end":47,"line_start":4,"line_end":4,"column_start":14,"column_end":20,"is_primary":true,"text":[{"text":"    thread::{self, sleep},","highlight_start":14,"highlight_end":20}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"src/main.rs","byte_start":73,"byte_end":93,"line_start":5,"line_end":5,"column_start":19,"column_end":39,"is_primary":true,"text":[{"text":"    time::Duration, sync::{Mutex, Arc}","highlight_start":19,"highlight_end":39}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused imports: `Arc`, `Mutex`, `self`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:4:14\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m4\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    thread::{self, sleep},\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m5\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    time::Duration, sync::{Mutex, Arc}\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                           \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(unused_imports)]` on by default\u001b[0m\n\n"}
{"message":"unused imports: `SeedableRng`, `rngs::StdRng`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"src/main.rs","byte_start":203,"byte_end":215,"line_start":9,"line_end":9,"column_start":17,"column_end":29,"is_primary":true,"text":[{"text":"use rand::{Rng, rngs::StdRng, SeedableRng};","highlight_start":17,"highlight_end":29}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/main.rs","byte_start":217,"byte_end":228,"line_start":9,"line_end":9,"column_start":31,"column_end":42,"is_primary":true,"text":[{"text":"use rand::{Rng, rngs::StdRng, SeedableRng};","highlight_start":31,"highlight_end":42}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"remove the unused imports","code":null,"level":"help","spans":[{"file_name":"src/main.rs","byte_start":201,"byte_end":228,"line_start":9,"line_end":9,"column_start":15,"column_end":42,"is_primary":true,"text":[{"text":"use rand::{Rng, rngs::StdRng, SeedableRng};","highlight_start":15,"highlight_end":42}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused imports: `SeedableRng`, `rngs::StdRng`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:9:17\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m9\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse rand::{Rng, rngs::StdRng, SeedableRng};\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^\u001b[0m\n\n"}
{"message":"unreachable expression","code":{"code":"unreachable_code","explanation":null},"level":"warning","spans":[{"file_name":"src/main.rs","byte_start":5822,"byte_end":5828,"line_start":171,"line_end":171,"column_start":5,"column_end":11,"is_primary":true,"text":[{"text":"    Ok(())","highlight_start":5,"highlight_end":11}],"label":"unreachable expression","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/main.rs","byte_start":1904,"byte_end":5817,"line_start":65,"line_end":170,"column_start":5,"column_end":6,"is_primary":false,"text":[{"text":"    loop {","highlight_start":5,"highlight_end":11},{"text":"        //十秒一次","highlight_start":1,"highlight_end":15},{"text":"        if i == 10000 {","highlight_start":1,"highlight_end":24},{"text":"            client.query(\"truncate cache;\", &[]).await?;","highlight_start":1,"highlight_end":57},{"text":"            client.query(\"truncate cpu_freq;\", &[]).await?;","highlight_start":1,"highlight_end":60},{"text":"            client.query(\"truncate cpu_time;\", &[]).await?;","highlight_start":1,"highlight_end":60},{"text":"            client","highlight_start":1,"highlight_end":19},{"text":"                .query(\"truncate cpu_time_usage_predict;\", &[])","highlight_start":1,"highlight_end":64},{"text":"                .await?;","highlight_start":1,"highlight_end":25},{"text":"            client.query(\"truncate disk;\", &[]).await?;","highlight_start":1,"highlight_end":56},{"text":"            client.query(\"truncate env_temp;\", &[]).await?;","highlight_start":1,"highlight_end":60},{"text":"            client.query(\"truncate fan_speed;\", &[]).await?;","highlight_start":1,"highlight_end":61},{"text":"            client.query(\"truncate internet;\", &[]).await?;","highlight_start":1,"highlight_end":60},{"text":"            client.query(\"truncate ram;\", &[]).await?;","highlight_start":1,"highlight_end":55},{"text":"            client.query(\"truncate models;\", &[]).await?;","highlight_start":1,"highlight_end":58},{"text":"            client.query(\"truncate temperature;\", &[]).await?;","highlight_start":1,"highlight_end":63},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"        let timestamp = Utc::now();","highlight_start":1,"highlight_end":36},{"text":"        dataGenerator.refresh();","highlight_start":1,"highlight_end":33},{"text":"        let next_timestamp = timestamp","highlight_start":1,"highlight_end":39},{"text":"            .checked_add_signed(chrono::Duration::milliseconds(interval.as_millis() as i64))","highlight_start":1,"highlight_end":93},{"text":"            .unwrap();","highlight_start":1,"highlight_end":23},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        let cpu_info = dataGenerator.cpu_usage();","highlight_start":1,"highlight_end":50},{"text":"        let query = format!(","highlight_start":1,"highlight_end":29},{"text":"            \"insert into cpu_time values ('{}', '{}', {});\",","highlight_start":1,"highlight_end":61},{"text":"            timestamp, String::from(format!(\"{}1\", cpu_info.device)), cpu_info.usage","highlight_start":1,"highlight_end":85},{"text":"        );","highlight_start":1,"highlight_end":11},{"text":"        client.query(&query, &[]).await?;","highlight_start":1,"highlight_end":42},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        let query = format!(","highlight_start":1,"highlight_end":29},{"text":"            \"insert into cpu_freq values ('{}', '{}', {});\",","highlight_start":1,"highlight_end":61},{"text":"            timestamp, cpu_info.device, cpu_info.freq","highlight_start":1,"highlight_end":54},{"text":"        );","highlight_start":1,"highlight_end":11},{"text":"        client.query(&query, &[]).await?;","highlight_start":1,"highlight_end":42},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        let temperature_info = dataGenerator.temperature_info();","highlight_start":1,"highlight_end":65},{"text":"        for temp in temperature_info.into_iter() {","highlight_start":1,"highlight_end":51},{"text":"            let query = format!(","highlight_start":1,"highlight_end":33},{"text":"                \"insert into temperature values ('{}', '{}' , {});\",","highlight_start":1,"highlight_end":69},{"text":"                timestamp,","highlight_start":1,"highlight_end":27},{"text":"                temp.get_name(),","highlight_start":1,"highlight_end":33},{"text":"                temp.temperature","highlight_start":1,"highlight_end":33},{"text":"            );","highlight_start":1,"highlight_end":15},{"text":"            client.query(&query, &[]).await?;","highlight_start":1,"highlight_end":46},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        let fan_info = dataGenerator.fan_info();","highlight_start":1,"highlight_end":49},{"text":"        for fan in fan_info.into_iter() {","highlight_start":1,"highlight_end":42},{"text":"            let query = format!(","highlight_start":1,"highlight_end":33},{"text":"                \"insert into fan_speed values ('{}', '{}' , {});\",","highlight_start":1,"highlight_end":67},{"text":"                timestamp, fan.device, fan.voltage,","highlight_start":1,"highlight_end":52},{"text":"            );","highlight_start":1,"highlight_end":15},{"text":"            client.query(&query, &[]).await?;","highlight_start":1,"highlight_end":46},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        let net_info = dataGenerator.net_info(interval);","highlight_start":1,"highlight_end":57},{"text":"        let query = format!(","highlight_start":1,"highlight_end":29},{"text":"            \"insert into internet values ('{}', '{}', {}, {});\",","highlight_start":1,"highlight_end":65},{"text":"            timestamp, net_info.device, net_info.speed_recv, net_info.speed_trans,","highlight_start":1,"highlight_end":83},{"text":"        );","highlight_start":1,"highlight_end":11},{"text":"        client.query(&query, &[]).await?;","highlight_start":1,"highlight_end":42},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        let disks = dataGenerator.disk_info();","highlight_start":1,"highlight_end":47},{"text":"        for disk in disks {","highlight_start":1,"highlight_end":28},{"text":"            let query = format!(","highlight_start":1,"highlight_end":33},{"text":"                \"insert into disk values ('{}', '{}', {}, {});\",","highlight_start":1,"highlight_end":65},{"text":"                timestamp, disk.disk_name, disk.space_total, disk.space_available,","highlight_start":1,"highlight_end":83},{"text":"            );","highlight_start":1,"highlight_end":15},{"text":"            client.query(&query, &[]).await?;","highlight_start":1,"highlight_end":46},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        let mem = dataGenerator.mem_info();","highlight_start":1,"highlight_end":44},{"text":"        let query = format!(","highlight_start":1,"highlight_end":29},{"text":"            \"insert into ram values ('{}', '{}', {}, {}, {});\",","highlight_start":1,"highlight_end":64},{"text":"            timestamp,","highlight_start":1,"highlight_end":23},{"text":"            String::from(\"dells\"),","highlight_start":1,"highlight_end":35},{"text":"            mem.mem_total,","highlight_start":1,"highlight_end":27},{"text":"            mem.mem_available,","highlight_start":1,"highlight_end":31},{"text":"            (mem.mem_total - mem.mem_available) as f64 * 100.0 / mem.mem_total as f64,","highlight_start":1,"highlight_end":87},{"text":"        );","highlight_start":1,"highlight_end":11},{"text":"        client.query(&query, &[]).await?;","highlight_start":1,"highlight_end":42},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        let cache = dataGenerator.cache_info();","highlight_start":1,"highlight_end":48},{"text":"        let query = format!(","highlight_start":1,"highlight_end":29},{"text":"            \"insert into cache values ('{}', '{}', {}, {});\",","highlight_start":1,"highlight_end":62},{"text":"            timestamp,","highlight_start":1,"highlight_end":23},{"text":"            String::from(\"dells\"),","highlight_start":1,"highlight_end":35},{"text":"            cache.swap_total,","highlight_start":1,"highlight_end":30},{"text":"            cache.free_total,","highlight_start":1,"highlight_end":30},{"text":"        );","highlight_start":1,"highlight_end":11},{"text":"        client.query(&query, &[]).await?;","highlight_start":1,"highlight_end":42},{"text":"","highlight_start":1,"highlight_end":1},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        for i in 0..models.len() {","highlight_start":1,"highlight_end":35},{"text":"            let ratio = rng.gen_range(0.9..=1.1);","highlight_start":1,"highlight_end":50},{"text":"            let query = format!(","highlight_start":1,"highlight_end":33},{"text":"                \"insert into models values ('{}', '{}', {})\",","highlight_start":1,"highlight_end":62},{"text":"                timestamp, models[i], ratio","highlight_start":1,"highlight_end":44},{"text":"            );","highlight_start":1,"highlight_end":15},{"text":"            client.query(&query, &[]).await?;","highlight_start":1,"highlight_end":46},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        let sleep_duration = next_timestamp.signed_duration_since(Utc::now());","highlight_start":1,"highlight_end":79},{"text":"        sleep(sleep_duration.to_std().unwrap());","highlight_start":1,"highlight_end":49},{"text":"    }","highlight_start":1,"highlight_end":6}],"label":"any code following this expression is unreachable","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`#[warn(unreachable_code)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unreachable expression\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:171:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m65\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m    loop {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m66\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        //十秒一次\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m67\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        if i == 10000 {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m68\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            client.query(\"truncate cache;\", &[]).await?;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m169\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        sleep(sleep_duration.to_std().unwrap());\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m170\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|_____-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12many code following this expression is unreachable\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m171\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m    Ok(())\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33munreachable expression\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(unreachable_code)]` on by default\u001b[0m\n\n"}
{"message":"unused variable: `rx`","code":{"code":"unused_variables","explanation":null},"level":"warning","spans":[{"file_name":"src/pgconn.rs","byte_start":88,"byte_end":90,"line_start":6,"line_end":6,"column_start":27,"column_end":29,"is_primary":true,"text":[{"text":"async fn main_connnect<T>(rx: mpsc::Sender<T>) -> Result<(), Error> {","highlight_start":27,"highlight_end":29}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`#[warn(unused_variables)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"if this is intentional, prefix it with an underscore","code":null,"level":"help","spans":[{"file_name":"src/pgconn.rs","byte_start":88,"byte_end":90,"line_start":6,"line_end":6,"column_start":27,"column_end":29,"is_primary":true,"text":[{"text":"async fn main_connnect<T>(rx: mpsc::Sender<T>) -> Result<(), Error> {","highlight_start":27,"highlight_end":29}],"label":null,"suggested_replacement":"_rx","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused variable: `rx`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/pgconn.rs:6:27\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m6\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0masync fn main_connnect<T>(rx: mpsc::Sender<T>) -> Result<(), Error> {\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                          \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: if this is intentional, prefix it with an underscore: `_rx`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(unused_variables)]` on by default\u001b[0m\n\n"}
{"message":"unused variable: `client`","code":{"code":"unused_variables","explanation":null},"level":"warning","spans":[{"file_name":"src/pgconn.rs","byte_start":350,"byte_end":356,"line_start":14,"line_end":14,"column_start":10,"column_end":16,"is_primary":true,"text":[{"text":"    let (client, connect) = config.connect(NoTls).await?;","highlight_start":10,"highlight_end":16}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"if this is intentional, prefix it with an underscore","code":null,"level":"help","spans":[{"file_name":"src/pgconn.rs","byte_start":350,"byte_end":356,"line_start":14,"line_end":14,"column_start":10,"column_end":16,"is_primary":true,"text":[{"text":"    let (client, connect) = config.connect(NoTls).await?;","highlight_start":10,"highlight_end":16}],"label":null,"suggested_replacement":"_client","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused variable: `client`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/pgconn.rs:14:10\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m14\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    let (client, connect) = config.connect(NoTls).await?;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: if this is intentional, prefix it with an underscore: `_client`\u001b[0m\n\n"}
{"message":"function `main_connnect` is never used","code":{"code":"dead_code","explanation":null},"level":"warning","spans":[{"file_name":"src/pgconn.rs","byte_start":71,"byte_end":84,"line_start":6,"line_end":6,"column_start":10,"column_end":23,"is_primary":true,"text":[{"text":"async fn main_connnect<T>(rx: mpsc::Sender<T>) -> Result<(), Error> {","highlight_start":10,"highlight_end":23}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`#[warn(dead_code)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: function `main_connnect` is never used\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/pgconn.rs:6:10\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m6\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0masync fn main_connnect<T>(rx: mpsc::Sender<T>) -> Result<(), Error> {\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(dead_code)]` on by default\u001b[0m\n\n"}
{"message":"crate `LinuxMonitor` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"src/main.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1,"is_primary":true,"text":[],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to snake case: `linux_monitor`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"`#[warn(non_snake_case)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: crate `LinuxMonitor` should have a snake case name\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: convert the identifier to snake case: `linux_monitor`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(non_snake_case)]` on by default\u001b[0m\n\n"}
{"message":"variable `dataGenerator` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"src/main.rs","byte_start":979,"byte_end":992,"line_start":39,"line_end":39,"column_start":13,"column_end":26,"is_primary":true,"text":[{"text":"    let mut dataGenerator = TimeSeriesMonitor::new();","highlight_start":13,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"src/main.rs","byte_start":979,"byte_end":992,"line_start":39,"line_end":39,"column_start":13,"column_end":26,"is_primary":true,"text":[{"text":"    let mut dataGenerator = TimeSeriesMonitor::new();","highlight_start":13,"highlight_end":26}],"label":null,"suggested_replacement":"data_generator","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: variable `dataGenerator` should have a snake case name\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:39:13\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m39\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    let mut dataGenerator = TimeSeriesMonitor::new();\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case: `data_generator`\u001b[0m\n\n"}
{"message":"8 warnings emitted","code":null,"level":"warning","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: 8 warnings emitted\u001b[0m\n\n"}
