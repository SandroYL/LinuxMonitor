{"message":"unused import: `time::Duration`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"src/TimeCollector.rs","byte_start":77,"byte_end":91,"line_start":3,"line_end":3,"column_start":32,"column_end":46,"is_primary":true,"text":[{"text":"use std::{fs::File, io::Write, time::Duration};","highlight_start":32,"highlight_end":46}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`#[warn(unused_imports)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"remove the unused import","code":null,"level":"help","spans":[{"file_name":"src/TimeCollector.rs","byte_start":75,"byte_end":91,"line_start":3,"line_end":3,"column_start":30,"column_end":46,"is_primary":true,"text":[{"text":"use std::{fs::File, io::Write, time::Duration};","highlight_start":30,"highlight_end":46}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused import: `time::Duration`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/TimeCollector.rs:3:32\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m3\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse std::{fs::File, io::Write, time::Duration};\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                               \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(unused_imports)]` on by default\u001b[0m\n\n"}
{"message":"unreachable expression","code":{"code":"unreachable_code","explanation":null},"level":"warning","spans":[{"file_name":"src/main.rs","byte_start":3844,"byte_end":3850,"line_start":125,"line_end":125,"column_start":5,"column_end":11,"is_primary":true,"text":[{"text":"    Ok(())","highlight_start":5,"highlight_end":11}],"label":"unreachable expression","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/main.rs","byte_start":1267,"byte_end":3839,"line_start":45,"line_end":124,"column_start":5,"column_end":6,"is_primary":false,"text":[{"text":"    loop {","highlight_start":5,"highlight_end":11},{"text":"        //十秒一次","highlight_start":1,"highlight_end":15},{"text":"        let timestamp = Utc::now();","highlight_start":1,"highlight_end":36},{"text":"        let next_timestamp = timestamp + interval;","highlight_start":1,"highlight_end":51},{"text":"        system.refresh_all();","highlight_start":1,"highlight_end":30},{"text":"        let Collectors = TimeCollector::Collectors::new();","highlight_start":1,"highlight_end":59},{"text":"        let cpu_infos = Collectors.time_datas.cpu_time_info();","highlight_start":1,"highlight_end":63},{"text":"        let cpu_usage = Collectors.time_datas.cpu_usage_info(&mut system);","highlight_start":1,"highlight_end":75},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        for ctimes in cpu_infos.into_iter().zip(cpu_usage) {","highlight_start":1,"highlight_end":61},{"text":"            let query = format!(","highlight_start":1,"highlight_end":33},{"text":"                \"insert into cpu_time values ('{}', '{}', {})\",","highlight_start":1,"highlight_end":64},{"text":"                timestamp, ctimes.0.device, ctimes.1","highlight_start":1,"highlight_end":53},{"text":"            );","highlight_start":1,"highlight_end":15},{"text":"            client.query(&query, &[]).await?;","highlight_start":1,"highlight_end":46},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        let temperature_info = Collectors.time_datas.temperature_info();","highlight_start":1,"highlight_end":73},{"text":"        for temp in temperature_info.into_iter() {","highlight_start":1,"highlight_end":51},{"text":"            let query = format!(","highlight_start":1,"highlight_end":33},{"text":"                \"insert into temperature values ('{}', '{}' , {})\",","highlight_start":1,"highlight_end":68},{"text":"                timestamp,","highlight_start":1,"highlight_end":27},{"text":"                temp.get_name(),","highlight_start":1,"highlight_end":33},{"text":"                temp.temperature","highlight_start":1,"highlight_end":33},{"text":"            );","highlight_start":1,"highlight_end":15},{"text":"            client.query(&query, &[]).await?;","highlight_start":1,"highlight_end":46},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        let net_info = Collectors.time_datas.net_info().await;","highlight_start":1,"highlight_end":63},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        let query = format!(","highlight_start":1,"highlight_end":29},{"text":"            \"insert into internet values ('{}', '{}', {})\",","highlight_start":1,"highlight_end":60},{"text":"            timestamp,","highlight_start":1,"highlight_end":23},{"text":"            net_info.device,","highlight_start":1,"highlight_end":29},{"text":"            net_info.get_speed(),","highlight_start":1,"highlight_end":34},{"text":"        );","highlight_start":1,"highlight_end":11},{"text":"        client.query(&query, &[]).await?;","highlight_start":1,"highlight_end":42},{"text":"        let mut rng = rand::thread_rng();","highlight_start":1,"highlight_end":42},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        let query = format!(","highlight_start":1,"highlight_end":29},{"text":"            \"insert into env_temp values ('{}', '{}', {})\",","highlight_start":1,"highlight_end":60},{"text":"            timestamp,","highlight_start":1,"highlight_end":23},{"text":"            environment_temp,","highlight_start":1,"highlight_end":30},{"text":"            rng.gen_range(0..=50000)","highlight_start":1,"highlight_end":37},{"text":"        );","highlight_start":1,"highlight_end":11},{"text":"        client.query(&query, &[]).await?;","highlight_start":1,"highlight_end":42},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        for i in 0..disk.len() {","highlight_start":1,"highlight_end":33},{"text":"            let query = format!(","highlight_start":1,"highlight_end":33},{"text":"                \"insert into disk values ('{}', '{}', {})\",","highlight_start":1,"highlight_end":60},{"text":"                timestamp,","highlight_start":1,"highlight_end":27},{"text":"                disk[i],","highlight_start":1,"highlight_end":25},{"text":"                rng.gen_range(0..=50000)","highlight_start":1,"highlight_end":41},{"text":"            );","highlight_start":1,"highlight_end":15},{"text":"            client.query(&query, &[]).await?;","highlight_start":1,"highlight_end":46},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        let query = format!(","highlight_start":1,"highlight_end":29},{"text":"            \"insert into fan_speed values ('{}', '{}', {})\",","highlight_start":1,"highlight_end":61},{"text":"            timestamp,","highlight_start":1,"highlight_end":23},{"text":"            fan_speed,","highlight_start":1,"highlight_end":23},{"text":"            rng.gen_range(0..=300)","highlight_start":1,"highlight_end":35},{"text":"        );","highlight_start":1,"highlight_end":11},{"text":"        client.query(&query, &[]).await?;","highlight_start":1,"highlight_end":42},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"        for i in 0..models.len() {","highlight_start":1,"highlight_end":35},{"text":"            let ratio = rng.gen_range(0.9..=1.1);","highlight_start":1,"highlight_end":50},{"text":"            let query = format!(","highlight_start":1,"highlight_end":33},{"text":"                \"insert into models values ('{}', '{}', {})\",","highlight_start":1,"highlight_end":62},{"text":"                timestamp,","highlight_start":1,"highlight_end":27},{"text":"                models[i],","highlight_start":1,"highlight_end":27},{"text":"                ratio","highlight_start":1,"highlight_end":22},{"text":"            );","highlight_start":1,"highlight_end":15},{"text":"            client.query(&query, &[]).await?;","highlight_start":1,"highlight_end":46},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        let sleep_duration = next_timestamp.signed_duration_since(Utc::now());","highlight_start":1,"highlight_end":79},{"text":"        sleep(sleep_duration.to_std().unwrap());","highlight_start":1,"highlight_end":49},{"text":"    }","highlight_start":1,"highlight_end":6}],"label":"any code following this expression is unreachable","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`#[warn(unreachable_code)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unreachable expression\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:125:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m45\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m    loop {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m46\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        //十秒一次\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m47\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        let timestamp = Utc::now();\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m48\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        let next_timestamp = timestamp + interval;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m123\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        sleep(sleep_duration.to_std().unwrap());\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m124\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|_____-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12many code following this expression is unreachable\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m125\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m    Ok(())\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33munreachable expression\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(unreachable_code)]` on by default\u001b[0m\n\n"}
{"message":"unused variable: `update_time`","code":{"code":"unused_variables","explanation":null},"level":"warning","spans":[{"file_name":"src/TimeCollector.rs","byte_start":1401,"byte_end":1412,"line_start":42,"line_end":42,"column_start":49,"column_end":60,"is_primary":true,"text":[{"text":"    pub async fn get_timeseries_data(&mut self, update_time: u32, refresh_times: usize) -> std::io::Result<()> {","highlight_start":49,"highlight_end":60}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`#[warn(unused_variables)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"if this is intentional, prefix it with an underscore","code":null,"level":"help","spans":[{"file_name":"src/TimeCollector.rs","byte_start":1401,"byte_end":1412,"line_start":42,"line_end":42,"column_start":49,"column_end":60,"is_primary":true,"text":[{"text":"    pub async fn get_timeseries_data(&mut self, update_time: u32, refresh_times: usize) -> std::io::Result<()> {","highlight_start":49,"highlight_end":60}],"label":null,"suggested_replacement":"_update_time","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused variable: `update_time`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/TimeCollector.rs:42:49\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m42\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub async fn get_timeseries_data(&mut self, update_time: u32, refresh_times: usize) -> std::io::Result<()> {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: if this is intentional, prefix it with an underscore: `_update_time`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(unused_variables)]` on by default\u001b[0m\n\n"}
{"message":"unused variable: `refresh_times`","code":{"code":"unused_variables","explanation":null},"level":"warning","spans":[{"file_name":"src/TimeCollector.rs","byte_start":1419,"byte_end":1432,"line_start":42,"line_end":42,"column_start":67,"column_end":80,"is_primary":true,"text":[{"text":"    pub async fn get_timeseries_data(&mut self, update_time: u32, refresh_times: usize) -> std::io::Result<()> {","highlight_start":67,"highlight_end":80}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"if this is intentional, prefix it with an underscore","code":null,"level":"help","spans":[{"file_name":"src/TimeCollector.rs","byte_start":1419,"byte_end":1432,"line_start":42,"line_end":42,"column_start":67,"column_end":80,"is_primary":true,"text":[{"text":"    pub async fn get_timeseries_data(&mut self, update_time: u32, refresh_times: usize) -> std::io::Result<()> {","highlight_start":67,"highlight_end":80}],"label":null,"suggested_replacement":"_refresh_times","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused variable: `refresh_times`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/TimeCollector.rs:42:67\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m42\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub async fn get_timeseries_data(&mut self, update_time: u32, refresh_times: usize) -> std::io::Result<()> {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                                  \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: if this is intentional, prefix it with an underscore: `_refresh_times`\u001b[0m\n\n"}
{"message":"crate `LinuxMonitor` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"src/main.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1,"is_primary":true,"text":[],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to snake case: `linux_monitor`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"`#[warn(non_snake_case)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: crate `LinuxMonitor` should have a snake case name\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: convert the identifier to snake case: `linux_monitor`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(non_snake_case)]` on by default\u001b[0m\n\n"}
{"message":"module `TimeCollector` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"src/main.rs","byte_start":156,"byte_end":169,"line_start":8,"line_end":8,"column_start":9,"column_end":22,"is_primary":true,"text":[{"text":"pub mod TimeCollector;","highlight_start":9,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"src/main.rs","byte_start":156,"byte_end":169,"line_start":8,"line_end":8,"column_start":9,"column_end":22,"is_primary":true,"text":[{"text":"pub mod TimeCollector;","highlight_start":9,"highlight_end":22}],"label":null,"suggested_replacement":"time_collector","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: module `TimeCollector` should have a snake case name\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:8:9\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m8\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub mod TimeCollector;\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case: `time_collector`\u001b[0m\n\n"}
{"message":"variable `Collectors` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"src/main.rs","byte_start":1426,"byte_end":1436,"line_start":50,"line_end":50,"column_start":13,"column_end":23,"is_primary":true,"text":[{"text":"        let Collectors = TimeCollector::Collectors::new();","highlight_start":13,"highlight_end":23}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"src/main.rs","byte_start":1426,"byte_end":1436,"line_start":50,"line_end":50,"column_start":13,"column_end":23,"is_primary":true,"text":[{"text":"        let Collectors = TimeCollector::Collectors::new();","highlight_start":13,"highlight_end":23}],"label":null,"suggested_replacement":"collectors","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: variable `Collectors` should have a snake case name\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:50:13\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m50\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        let Collectors = TimeCollector::Collectors::new();\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case (notice the capitalization): `collectors`\u001b[0m\n\n"}
{"message":"7 warnings emitted","code":null,"level":"warning","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: 7 warnings emitted\u001b[0m\n\n"}
